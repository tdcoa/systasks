description: Print out table vt_statement_count_by_table, for reconciliation purposes.

tasks:

### ============= STANDARD PRE-PROCESSING =============
# SETUP run context, and skip duplicate CREATE vt_* statements :
{% set run = namespace(completed=[], variables={}) if run is not defined else run %}
### Macro imported below will validate /correct a subset of variables,
### then export ALL variables to a reconcile_variables.csv
### Hence, this process must run AFTER the "tasks:" node
{% import "coa_util.j2" as macro with context %}
{{ macro.validate_variables(run) }}
### return corrected variables to the main namespace:
{% set startdate     = run.variables['startdate']     %}
{% set enddate       = run.variables['enddate']       %}
{% set your_name     = run.variables['your_name']     %}
{% set your_title    = run.variables['your_title']    %}
{% set customer_name = run.variables['customer_name'] %}
{% set tdver = run.variables['tdver'] %}{% set td15 = run.variables['td15'] %}
{% set td16 = run.variables['td16'] %}{% set td17 = run.variables['td17'] %}
### ============= STANDARD PRE-PROCESSING =============


{% include "vt_statement_count_by_table.j2" %}

- name: Export summary of vt_statement_count_by_table to csv (at 2m row/mth, default select is summary, not detail)
  connect: source
  export:
    file: table_count_by_statement.csv
    sql:  |
      select LogDate
      ,Statement_Bucket
      ,sum(Request_Count) as Request_Count
      ,count(TableName) as Table_Count
      from  vt_statement_count_by_table
      group by 1,2
      order by 1,2

- name: Export detail for last day of vt_statement_count_by_table to csv
  connect: source
  export:
    file: table_detail_by_statement_lastday.csv
    sql:  |
      select * from  vt_statement_count_by_table
      qualify LogDate = max(LogDate) over(partition by Statement_Bucket)
      order by LogDate desc, Statement_Bucket asc

{%if export_all %}
- name: "Export all data from export (can be large)"
  connect: source
  export:
    file: table_detail_by_statement.csv
    sql: |
      select * from  vt_statement_count_by_table
      order by LogDate desc, Statement_Bucket asc
{% endif %}


- name: "Export number of tables that exceed 1500 DML (ins/del/upd/merge) per day, for charting"
  connect: source
  export:
    file: table_count_over_1500_dml.csv
    sql: |
      Select LogDate, Count(TableName) as "Table Count--#27C1BD"
      from vt_statement_count_by_table
      where Request_Count > 1500
        and Statement_Class = 'DML'
      group by 1
      order by 1

- name: Chart of tables with over 1500 DML per day, on average
  chart:
    command: chart/line_xDate_yElse.py
    params:
      - "file:table_count_over_1500_dml.csv"
      - "title:Table Count over 1500 daily Inserts/Updates/Deletes - {{ siteid }}"
      - "height:4"
      - "width:10"
