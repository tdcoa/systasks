{% set run = namespace(completed=[]) if run is not defined else run %}
{% if not 'vt_dbc_constraint' in run.completed %}

- name: Create vt_dbc_constraint, showing all constraints by table
  connect: source
  execute:
    sql: |
      CREATE MULTISET VOLATILE TABLE vt_dbc_constraint
      (
       DatabaseName   VARCHAR(128)   CHARACTER SET UNICODE NOT CASESPECIFIC,
       TableName      VARCHAR(128)   CHARACTER SET UNICODE NOT CASESPECIFIC,
       ConstraintType VARCHAR(30)    CHARACTER SET UNICODE NOT CASESPECIFIC,
       Details        VARCHAR(20000) CHARACTER SET UNICODE NOT CASESPECIFIC
      )
      primary index (TableName)
      ON COMMIT PRESERVE ROWS;

- name: Create vt_dbc_constraint, showing all constraints by table
  connect: source
  execute:
    sql: |
      insert into vt_dbc_constraint
          SELECT
                DatabaseName,
                TableName,
                CASE WHEN IndexType IN ('U','P','Q') THEN 'Unique'
                     WHEN IndexType IN ('K') THEN 'Primary Key'
                END (VARCHAR(30)) AS ConstraintType,
                {% if rowsize_64k %}
                cast(null as varchar(20000)) as Details
                {% else %}
                TRIM(TRAILING ','
                     FROM XMLAGG(ColumnName || ','
                     ORDER BY ColumnPosition)(VARCHAR(20000))) AS Details
                {% endif %}
          FROM  DBC.IndicesV
          WHERE IndexType IN ('K','U','P','Q')
            AND UniqueFlag = 'Y'
          GROUP BY  DatabaseName, TableName, IndexType, IndexNumber
        UNION ALL
          SELECT  ChildDB,
                  ChildTable,
                  'Foreign Key',
                  '>- ' || ParentDB || '.' || ParentTable
          FROM    DBC.RI_Distinct_ChildrenV
        UNION ALL
          SELECT  DatabaseName,
                  TableName,
                  'Column Constraint',
                  REGEXP_SUBSTR(ColumnConstraint,'\(.*',1,1)
          FROM    DBC.ColumnsV
          WHERE   ColumnConstraint IS NOT NULL
        UNION ALL
          SELECT  DatabaseName,
                  TableName,
                  'Table Constraint',
                  REGEXP_SUBSTR(ConstraintText,'\(.*',1,1)
          FROM    DBC.Table_LevelConstraintsV
        UNION ALL
          SELECT  COL.DatabaseName,
                  COL.TableName,
                  'Default',
                  COL.ColumnName || ' = ' || COL.DefaultValue
          FROM    DBC.ColumnsV COL
          JOIN    DBC.Tablesv TAB
          ON      TAB.DatabaseName = COL.DatabaseName
          AND     TAB.TableName = COL.TableName
          AND     TAB.TableKind = 'T'
          WHERE   COL.DefaultValue IS NOT NULL


- name: Collect Stats on vt_dbc_constraint
  connect: source
  execute:
    sql: collect stats on vt_dbc_constraint column(TableName)

{% endif %}
{{ run.completed.append('vt_dbc_constraint') or '' }}
