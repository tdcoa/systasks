{% set run = namespace(completed=[]) if run is not defined else run %}
{% if not 'vt_dbc_constraint' in run.completed %}

- name: Create vt_dbc_constraint, showing all constraints by table
  connect: source
  execute:
    sql: |
      CREATE MULTISET VOLATILE TABLE vt_dbc_constraint
      (
       DatabaseName   VARCHAR(128)   CHARACTER SET UNICODE NOT CASESPECIFIC,
       TableName      VARCHAR(128)   CHARACTER SET UNICODE NOT CASESPECIFIC,
       ConstraintType VARCHAR(30)    CHARACTER SET UNICODE NOT CASESPECIFIC,
       Details        VARCHAR(20000) CHARACTER SET UNICODE NOT CASESPECIFIC
      )
      primary index (TableName)
      ON COMMIT PRESERVE ROWS;

- name: Populate vt_dbc_constraint with contstraint - Indicies
  connect: source
  execute:
    sql: |
      insert into vt_dbc_constraint
          SELECT
                DatabaseName,
                TableName,
                CASE WHEN IndexType IN ('U','P','Q') THEN 'Unique'
                     WHEN IndexType IN ('K') THEN 'Primary Key'
                END (VARCHAR(30)) AS ConstraintType,
                {% if constraint_columns %}
                TRIM(TRAILING ','
                     FROM XMLAGG(cast(ColumnName as varchar(128) character set unicode)  || ','
                     ORDER BY ColumnPosition)(VARCHAR(20000))) AS Details
                {% else %}
                  cast(null as varchar(20000)) as Details_blank
                {% endif %}
          FROM  DBC.IndicesV
          WHERE IndexType IN ('K','U','P','Q')
            AND UniqueFlag = 'Y'
          GROUP BY  DatabaseName, TableName, IndexType, IndexNumber

- name: Populate vt_dbc_constraint with contstraint - RI Children
  connect: source
  execute:
    sql: |
      SELECT  ChildDB,
              ChildTable,
              'Foreign Key',
              cast('>- ' || ParentDB || '.' || ParentTable as varchar(20000) character set unicode)
      FROM    DBC.RI_Distinct_ChildrenV

- name: Populate vt_dbc_constraint with contstraint - Column Constraints
  connect: source
  execute:
    sql: |
      SELECT  DatabaseName,
              TableName,
              'Column Constraint',
              cast(REGEXP_SUBSTR(ColumnConstraint,'\(.*',1,1) as varchar(20000) character set unicode)
      FROM    DBC.ColumnsV
      WHERE   ColumnConstraint IS NOT NULL

- name: Populate vt_dbc_constraint with contstraint - Table Constraints
  connect: source
  execute:
    sql: |
      SELECT  DatabaseName,
              TableName,
              'Table Constraint',
              cast(REGEXP_SUBSTR(ConstraintText,'\(.*',1,1) as varchar(20000) character set unicode)
      FROM    DBC.Table_LevelConstraintsV

- name: Populate vt_dbc_constraint with contstraint - Column Defaults
  connect: source
  execute:
    sql: |
      SELECT  COL.DatabaseName,
              COL.TableName,
              'Default',
              cast(COL.ColumnName || ' = ' || COL.DefaultValue as varchar(20000) character set unicode)
      FROM    DBC.ColumnsV COL
      JOIN    DBC.Tablesv TAB
      ON      TAB.DatabaseName = COL.DatabaseName
      AND     TAB.TableName = COL.TableName
      AND     TAB.TableKind = 'T'
      WHERE   COL.DefaultValue IS NOT NULL


- name: Collect Stats on vt_dbc_constraint
  connect: source
  execute:
    sql: collect stats on vt_dbc_constraint column(TableName)

{% endif %}
{{ run.completed.append('vt_dbc_constraint') or '' }}
