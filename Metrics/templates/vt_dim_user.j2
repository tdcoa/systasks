{% set run = namespace(completed=[]) if run is not defined else run %}
{% if not 'vt_dim_user' in run.completed %}

{% include "vt_dim_tdinternal_databases.j2" %}

- name: Create vt_dim_user
  connect: source
  execute:
    sql: |
      CREATE SET Volatile TABLE vt_dim_user
      (
           UserName      VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL
          ,FullName      VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC
          ,UserType      VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC
          ,Organization  VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC
          ,Department    VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC
          ,Exclude_VantageUnit_Flag  BYTEINT
          ,Exclude_Performance_Flag  BYTEINT
      )
      UNIQUE PRIMARY INDEX ( UserName ) on commit preserve rows


{% if transcend_dim_load %}
- name: "TRANSCEND ONLY: insert into vt_dim_user from Transcend Master (will not work on customer system)"
  connect: source
  execute:
    sql: |
      Insert into vt_dim_user
      Select UserName, FullName, UserType, Organization, Department
      ,coalesce(Exclude_VantageUnit_Flag,0) as Exclude_VantageUnit_Flag
      ,coalesce(Exclude_Performance_Flag,0) as Exclude_Performance_Flag
      from pdcrinfo.userinfo
      left outer join vt_dim_tdinternal_databases
      on DatabaseName = UserName

{% else %}
- name: "Import metadata dim_user.csv (user mappings) into vt_dim_user"
  connect: source
  import:
    file: {{ dim_user | default (dirs.systasks / "Metrics" / "data" / "dim_user.csv") }}
    table: vt_dim_user

{% endif %}


{% if pdcr %}
- name: If PDCR, insert PDCRInfo.UserInfo information into vt_dim_user, if missing
  connect: source
  execute:
    sql: |
      insert into vt_dim_user
      select UserName, FullName, UserType, Organization, Department, 0, 0
      from pdcrinfo.UserInfo
      where
        (RecordStartDate between {{ startdate }} and {{ enddate }}  or
         RecordEndDate   between {{ startdate }} and {{ enddate }}  or
         coalesce(RecordEndDate, DATE+1) >= {{ enddate }})
      and UserName not in (Select UserName from vt_dim_user)
      qualify coalesce(RecordEndDate,DATE+1) = max(coalesce(RecordEndDate,DATE+1)) over(partition by UserName)
{% endif %}


- name: Insert any TD Internal Databases we may have defined
  connect: source
  execute:
    sql: |
      insert into vt_dim_user
      select DatabaseName as UserName
      ,coalesce(CommentString,DatabaseUse,'Unknown') as FullName
      ,'Teradata Internal' as UserType
      ,'Teradata Internal' as Organization
      ,'Teradata Internal' as Department
      ,0,0 --EXCLUDE flags
      from vt_dim_tdinternal_databases
      where DatabaseName not in (Select UserName from vt_dim_user)
        and DatabaseUse = 'U'


- name: Insert any missing UserNames into vt_dim_user from dbc.Databases
  connect: source
  execute:
    sql: |
      insert into vt_dim_user
      Select DatabaseName as UserName
      ,'Unknown' as FullName
      ,'Unknown' as UserType
      ,'Unknown' as Organization
      ,'Unknown' as Department
      ,0,0 --EXCLUDE flags
      from dbc.DatabasesV
      where DBKind = 'U'
      and UserName not in (Select UserName from vt_dim_user)


- name: Update TDInternal Databases to a consistent UserType
  connect: source
  execute:
    sql: |
      update A
      from vt_dim_user A,  vt_dim_tdinternal_databases B
      SET Exclude_VantageUnit_Flag = B.Exclude_VantageUnit_Flag
         ,Exclude_Performance_Flag = B.Exclude_Performance_Flag
         ,UserType = 'Teradata Internal'
      where A.UserName = B.DatabaseName


- name:  "Collect Stats vt_dim_user"
  connect: source
  execute:
    sql: collect stats on vt_dim_user column(UserName)

{% endif %}
{{ run.completed.append('vt_dim_user') or '' }}
