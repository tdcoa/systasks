{% set run = namespace(completed=[]) if run is not defined else run %}
{% if not 'vt_feature_usage' in run.completed %}

### ============= SET DEFAULT EXECUTION BEHAVIOR =============
{% set td15           = True  if tdver[:2]=='15'                else False %}
{% set process_chunks = 1     if process_chunks is not defined  else process_chunks %}

- name: "Create vt_feature_usage (empty)"
  connect: source
  execute:
    sql: |
      create volatile table vt_feature_usage
      (Site_ID                    varchar(128)
      ,LogDate                    date format 'yyyy-mm-dd'
      ,UserName                   varchar(128)
      ,UserType                   varchar(128) compress(null,'Unknown')
      ,Organization               varchar(128) compress(null,'Unknown')
      ,Department                 varchar(128) compress(null,'Unknown')
      ,FeatureName                varchar(128)
      ,BitPos                     integer
      ,Feature_Category           varchar(128) compress(null,'Unknown')
      ,Feature_SubCategory        varchar(128) compress(null,'Unknown')
      ,Product_Name               varchar(128) compress(null,'Unknown')
      ,Product_Category           varchar(128) compress(null,'Unknown')
      ,Solution_Type              varchar(128) compress(null,'Unknown')
      ,User_Experience_Level_Name varchar(128) compress(null,'Unknown')
      ,Initiator_Role_Category    varchar(128) compress(null,'Unknown')
      ,Objective_Name             varchar(128) compress(null,'Unknown')
      ,Request_Total_Cnt          integer
      ,Statement_Total_Cnt        integer
      ,Request_Error_Cnt          integer
      ,Statement_Error_Cnt        integer
      ,Request_Abort_Cnt          integer
      ,Statement_Abort_Cnt        integer
      ,distinct_cnt_username      integer
      ,sum_parsercputime          decimal(18,2)
      ,sum_ampcputime             decimal(18,2)
      ,sum_totaliocount           decimal(18,2)
      ,sum_reqiokb                decimal(18,2)
      ,sum_reqphysio              decimal(18,2)
      ,sum_reqphysiokb            decimal(18,2)
      ,sum_usediota               decimal(38,2)
      ,sum_impactcpu              decimal(18,2)
      ,sum_impactio               decimal(18,2)
      ,sum_lockdelay              decimal(18,2)
      ,sum_delaytime              decimal(18,2)
      ,sum_minrespholdtime        decimal(18,2)
      ,sum_totalfirstresptime     decimal(18,2)
      ,cnt_allmapamp_query        decimal(18,2)
      ,avg_allmapamp_pe           decimal(18,2)
      ,sum_numsteps               integer
      ,sum_spoolusage             bigint
      ,sum_numresultrows          bigint
      ,Feature_Weight             integer compress(null, 0)
      ,Max_Threshold_LOW          integer compress(null, 10)
      ,Max_Threshold_MED          integer compress(null, 1000)
      ,Feature_CPU_Weight         integer compress(null, 1)
      ,Feature_IO_Weight          integer compress(null, 1)
      ,Feature_Time_Weight        integer compress(null, 1)
      ,Feature_Cnt_Weight         integer compress(null, 1)
      ) primary index(LogDate, UserName, FeatureName)
        on commit preserve rows



{% if not td15 %}
  ## then do most of the work...
  ## remember, TD15 has no FeatureLogging capability,
  ## so this returns the above empty table if on td15
  ## to prevent down-stream processes from failing.
  ## if not on 15, then do all work

{% include "vt_datedriver.j2" %}
{% include "vt_decode_feature.j2" %}
{% include "vt_decode_user.j2" %}

- name: Create vt_feature_usage_prework by date, user, and feature
  connect: source
  execute:
    sql: |
      CREATE VOLATILE TABLE vt_feature_usage_prework
       (
         Site_ID                VARCHAR(12) CHARACTER SET UNICODE NOT CASESPECIFIC
        ,LogDate                DATE FORMAT 'YYYY/MM/DD'
        ,Feature_Name           VARCHAR(512) CHARACTER SET LATIN NOT CASESPECIFIC
        ,BitPos                 INTEGER
        ,UserName               VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC
        ,UserType               VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC
        ,Organization           VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC
        ,Department             VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC
        ,Request_Total_Cnt      BIGINT
        ,Statement_Total_Cnt    BIGINT
        ,Request_Error_Cnt      BIGINT
        ,Statement_Error_Cnt    BIGINT
        ,Request_Abort_Cnt      BIGINT
        ,Statement_Abort_Cnt    BIGINT
        ,distinct_cnt_username  BIGINT
        ,sum_parsercputime      DECIMAL(38,4)
        ,sum_ampcputime         DECIMAL(38,4)
        ,sum_totaliocount       BIGINT
        ,sum_reqiokb            BIGINT
        ,sum_reqphysio          BIGINT
        ,sum_reqphysiokb        BIGINT
        ,sum_usediota           BIGINT
        ,sum_impactcpu          DECIMAL(38,4)
        ,sum_impactio           BIGINT
        ,sum_lockdelay          DECIMAL(38,4)
        ,sum_delaytime          DECIMAL(38,4)
        ,sum_minrespholdtime    DECIMAL(38,4)
        ,sum_totalfirstresptime DECIMAL(38,4)
        ,cnt_allmapamp_query    INTEGER
        ,avg_allmapamp_pe       FLOAT
        ,sum_numsteps           BIGINT
        ,sum_spoolusage         BIGINT
        ,sum_numresultrows      BIGINT
        ) PRIMARY INDEX ( LogDate ,Feature_Name ,UserName )
          ON COMMIT PRESERVE ROWS

# -----------------------------------------------
# ----- Loop Logic for filling vt_feature_usage_prework -----
# -----------------------------------------------

{% for ichunk in range(1, process_chunks+1) %}

- name: "Insert into vt_feature_usage_prework (chunk {{ ichunk }} of {{ process_chunks }})"
  connect: source
  execute:
    sql: |
      Insert into vt_feature_usage_prework
      with dbql as
        (
          select
           dbq.LogDate
          ,dbq.featureusage
          ,dbq.UserName
          ,usr.UserType
          ,usr.Organization
          ,usr.Department
          ,dbq.Request_Total_Cnt  -- as cnt_query
          ,dbq.Statement_Total_Cnt
          ,dbq.Request_Error_Cnt
          ,dbq.Statement_Error_Cnt
          ,dbq.Request_Abort_Cnt  -- as cnt_abort_query
          ,dbq.Statement_Abort_Cnt
          ,dbq.distinct_cnt_username
          ,dbq.sum_parsercputime
          ,dbq.sum_ampcputime
          ,dbq.sum_totaliocount
          ,dbq.sum_reqiokb
          ,dbq.sum_reqphysio
          ,dbq.sum_reqphysiokb
          ,dbq.sum_usediota
          ,dbq.sum_impactcpu
          ,dbq.sum_impactio
          ,dbq.sum_lockdelay
          ,dbq.sum_delaytime
          ,dbq.sum_minrespholdtime
          ,dbq.sum_totalfirstresptime
          ,dbq.cnt_allmapamp_query
          ,dbq.avg_allmapamp_pe
          ,dbq.sum_numsteps
          ,dbq.sum_spoolusage
          ,dbq.sum_numresultrows
          from (
                  select
                   UserName
                  ,{{ dbc.logdt }} as LogDate
                  ,featureusage
                  /* ====== Request and Statement Counts ======= */
                  ,zeroifnull(cast(count(*) as BigInt)) as Request_Total_Cnt  --<<--- cnt_query in TCA Pull
                  ,zeroifnull(sum(cast(dbql.Statements as BigInt))) as Statement_Total_Cnt
                  ,zeroifnull(sum(cast(case when dbql.ErrorCode not in(0,3158)  then 1               else 0 end as bigint))) as   Request_Error_Cnt
                  ,zeroifnull(sum(cast(case when dbql.ErrorCode not in(0,3158)  then dbql.Statements else 0 end as bigint))) as Statement_Error_Cnt
                  ,zeroifnull(sum(cast(case when dbql.Abortflag = 'T'           then 1               else 0 end as bigint))) as   Request_Abort_Cnt
                  ,zeroifnull(sum(cast(case when dbql.Abortflag = 'T'           then dbql.Statements else 0 end as bigint))) as Statement_Abort_Cnt
                  ,count(distinct username) as distinct_cnt_username
                  --consumption metrics
                  ,sum(ParserCPUTime) as sum_parsercputime
                  ,sum(ampcputime)    as sum_ampcputime
                  ,sum(case when TotalIOCount >(10**38) then 0 else TotalIOCount end) as sum_totaliocount
                  ,sum(case when ReqIOKB      >(10**38) then 0 else ReqIOKB      end) as sum_reqiokb
                  ,sum(case when ReqPhysIO    >(10**38) then 0 else ReqPhysIO    end) as sum_reqphysio
                  ,sum(case when ReqPhysIOKB  >(10**38) then 0 else ReqPhysIOKB  end) as sum_reqphysiokb
                  ,sum(case when UsedIota     >(10**38) then 0 else UsedIota     end) as sum_usediota
                  --impact
                  ,sum(case when maxampcputime = 0 then ampcputime else maxampcputime * numofactiveamps end) as sum_impactcpu
                  ,sum(case when maxampio = 0 then totaliocount else maxampio * numofactiveamps end)         as sum_impactio
                  --duration metrics
                  ,(sum(LockDelay*100))      as sum_lockdelay
                  ,(sum(DelayTime))          as sum_delaytime
                  ,(sum(MinRespHoldTime))    as sum_minrespholdtime
                  ,(sum(TotalFirstRespTime)) as sum_totalfirstresptime --delay+exec+minresp
                  --complexity metrics
                  -- ,sum(case when abortflag = 'T' then 1 else 0 end) as cnt_abort_query  --<<--- replaced by Request_Abort_Cnt, above
                  ,sum(case when NumOfActiveAMPs = MaxNumMapAMPs and MaxNumMapAMPs > 0 then 1 else 0 end) cnt_allmapamp_query
                  ,avg(case when NumOfActiveAMPs = MaxNumMapAMPs and MaxNumMapAMPs > 0 then
                    AmpCpuTime/nullifzero(NumOfActiveAmps*MaxAmpCpuTime) else null end) as avg_allmapamp_pe
                  ,sum(numsteps) as sum_numsteps
                  ,sum(spoolusage) as sum_spoolusage
                  ,sum(NumResultRows) as sum_numresultrows

                  From {{ dbc.log }} as dbql
                  where LogDate in(Select Calendar_Date from vt_DateDriver where Process_Chunk = {{ ichunk }})
                  and featureusage is not null
                  group by UserName
                  ,LogDate
                  ,featureusage
               ) as dbq
          join vt_decode_user as usr
            on usr.UserName = dbq.UserName
          )
        select
           '{{ siteid }}' as Site_ID
          ,LogDate
          ,feat.FeatureName as Feature_Name
          ,feat.featurebitpos as BitPos
          ,dbql.UserName
          ,dbql.UserType
          ,dbql.Organization
          ,dbql.Department
          ,sum(cast(dbql.Request_Total_Cnt         as bigint))        as Request_Total_Cnt
          ,sum(cast(dbql.Statement_Total_Cnt       as bigint))        as Statement_Total_Cnt
          ,sum(cast(dbql.Request_Error_Cnt         as bigint))        as Request_Error_Cnt
          ,sum(cast(dbql.Statement_Error_Cnt       as bigint))        as Statement_Error_Cnt
          ,sum(cast(dbql.Request_Abort_Cnt         as bigint))        as Request_Abort_Cnt
          ,sum(cast(dbql.Statement_Abort_Cnt       as bigint))        as Statement_Abort_Cnt
          ,sum(cast(dbql.distinct_cnt_username     as bigint))        as distinct_cnt_username
          ,sum(  cast(dbql.sum_parsercputime       as decimal(38,4))) as sum_parsercputime
          ,sum(  cast(dbql.sum_ampcputime          as decimal(38,4))) as sum_ampcputime
          ,sum(  cast(dbql.sum_totaliocount        as bigint))        as sum_totaliocount
          ,sum(  cast(dbql.sum_reqiokb             as bigint))        as sum_reqiokb
          ,sum(  cast(dbql.sum_reqphysio           as bigint))        as sum_reqphysio
          ,sum(  cast(dbql.sum_reqphysiokb         as bigint))        as sum_reqphysiokb
          ,sum(  cast(dbql.sum_usediota            as bigint))        as sum_usediota
          ,sum(  cast(dbql.sum_impactcpu           as decimal(38,4))) as sum_impactcpu
          ,sum(  cast(dbql.sum_impactio            as bigint))        as sum_impactio
          ,sum(  cast(dbql.sum_lockdelay           as decimal(38,4))) as sum_lockdelay
          ,sum(  cast(dbql.sum_delaytime           as decimal(38,4))) as sum_delaytime
          ,sum(  cast(dbql.sum_minrespholdtime     as decimal(38,4))) as sum_minrespholdtime
          ,sum(  cast(dbql.sum_totalfirstresptime  as decimal(38,4))) as sum_totalfirstresptime
          ,count(cast(dbql.cnt_allmapamp_query     as bigint))        as cnt_allmapamp_query
          ,avg(  cast(dbql.avg_allmapamp_pe        as bigint))        as avg_allmapamp_pe
          ,sum(  cast(dbql.sum_numsteps            as bigint))        as sum_numsteps
          ,sum(  cast(dbql.sum_spoolusage          as bigint))        as sum_spoolusage
          ,sum(  cast(dbql.sum_numresultrows       as bigint))        as sum_numresultrows
        from dbc.qrylogfeaturelistv feat
        join dbql
          on bytes(dbql.featureusage) = 256
         and getbit(dbql.featureusage,(2047-feat.featurebitpos)) = 1
        group by
           LogDate
          ,feat.featurename
          ,feat.featurebitpos
          ,dbql.UserName
          ,dbql.UserType
          ,dbql.Organization
          ,dbql.Department

{% endfor %}


- name: Collect Stats on vt_feature_usage_prework
  connect: source
  execute:
    sql: |
      collect stats
           column (LogDate, Feature_Name, UserName)
      on vt_feature_usage_prework


- name: insert into final vt_feature_usage by date, user, feature
  connect: source
  execute:
    sql: |
      insert into vt_feature_usage
        Select
         dat.Site_ID
        ,dat.LogDate
        ,dat.UserName
        ,dat.UserType
        ,dat.Organization
        ,dat.Department
        ,dat.Feature_Name as FeatureName
        ,dat.BitPos
        ,coalesce(dim.Feature_Category,           'Unknown') as Feature_Category
        ,coalesce(dim.Feature_SubCategory,        'Unknown') as Feature_SubCategory
        ,coalesce(dim.Product_Name,               'Unknown') as Product_Name
        ,coalesce(dim.Product_Category,           'Unknown') as Product_Category
        ,coalesce(dim.Solution_Type,              'Unknown') as Solution_Type
        ,coalesce(dim.User_Experience_Level_Name, 'Unknown') as User_Experience_Level_Name
        ,coalesce(dim.Initiator_Role_Category,    'Unknown') as Initiator_Role_Category
        ,coalesce(dim.Objective_Name,             'Unknown') as Objective_Name
        ,dat.Request_Total_Cnt
        ,dat.Statement_Total_Cnt
        ,dat.Request_Error_Cnt
        ,dat.Statement_Error_Cnt
        ,dat.Request_Abort_Cnt
        ,dat.Statement_Abort_Cnt
        ,dat.distinct_cnt_username
        ,dat.sum_parsercputime
        ,dat.sum_ampcputime
        ,dat.sum_totaliocount
        ,dat.sum_reqiokb
        ,dat.sum_reqphysio
        ,dat.sum_reqphysiokb
        ,dat.sum_usediota
        ,dat.sum_impactcpu
        ,dat.sum_impactio
        ,dat.sum_lockdelay
        ,dat.sum_delaytime
        ,dat.sum_minrespholdtime
        ,dat.sum_totalfirstresptime
        ,dat.cnt_allmapamp_query
        ,dat.avg_allmapamp_pe
        ,dat.sum_numsteps
        ,dat.sum_spoolusage
        ,dat.sum_numresultrows
        ,coalesce(dim.Feature_Weight,       0) as Feature_Weight
        ,coalesce(dim.Max_Threshold_LOW,   10) as Max_Threshold_LOW
        ,coalesce(dim.Max_Threshold_MED, 1000) as Max_Threshold_MED
        ,coalesce(dim.Feature_CPU_Weight,   1) as Feature_CPU_Weight
        ,coalesce(dim.Feature_IO_Weight,    1) as Feature_IO_Weight
        ,coalesce(dim.Feature_Time_Weight,  1) as Feature_Time_Weight
        ,coalesce(dim.Feature_Cnt_Weight,   1) as Feature_Cnt_Weight
        from vt_feature_usage_prework dat
        left outer join vt_decode_feature dim
        on dat.Feature_Name = dim.Feature_Name


- name: "Update vt_feature_usage to normalize 'NOS Metadata Subquery Feedback'"
  connect: source
  execute:
    sql: |
      update vt_feature_usage
      set   FeatureName = 'NOS Metadata Subquery Feedback'
      where FeatureName = 'Native Object Store Metadata Subquery Feedback'


{% if reconcile %}
- name: Reconcile vt_feature_usage_prework and vt_feature_usage
  connect: source
  export:
    file: reconcile_feature_usage.csv
    sql: |
      Select 'vt_feature_usage_prework' as tbl, count(*) as RecCount
      from vt_feature_usage_prework
        union all
      Select 'vt_feature_usage', count(*)
      from vt_feature_usage
{% endif %}

{% if not save_prework %}
- name: Drop temp vt_feature_usage_prework
  connect: source
  execute:
    sql: drop table vt_feature_usage_prework
{% endif %}




{% endif %}  ## end TD15 flag


- name: Collect Stats on vt_feature_usage
  connect: source
  execute:
    sql: |
      collect stats
           column (LogDate, FeatureName, UserName)
          ,column (LogDate)
          ,column (FeatureName)
          ,column (UserName)
          ,column (UserType)
          ,column (Organization)
          ,column (Department)
      on vt_feature_usage

{% endif %}
{{ run.completed.append('vt_feature_usage') or '' }}
