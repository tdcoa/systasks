{% set run = namespace(completed=[]) if run is not defined else run %}
{% if not 'vt_concurrency' in run.completed %}


- name:  Create vt_concurrency
  connect: source
  execute:
    sql: |
      Create Volatile Table vt_concurrency as
      (
      SELECT
       '{{ siteid | default('add variable: siteid')}}' as Site_ID
      ,cast(cast(StartTmHr as format 'YYYY-MM-DD') AS CHAR(10)) as LogDate
      ,cast(cast(StartTmHr as format 'YYYY-MM-DDBHH') AS CHAR(13)) || ':00:00' as LogTS
      ,cast(round(avg(PointConcurrency),0) as integer) as Concurrency_Avg
      ,max(case when Ntile <= 80 then PointConcurrency else null end) as Concurrency_80Pctl
      ,max(case when Ntile <= 95 then PointConcurrency else null end) as Concurrency_95Pctl
      ,max(PointConcurrency) as Concurrency_Peak
      FROM
        (SELECT
         cast(SUBSTR(CAST(ClockTick AS  VARCHAR(30)), 1, 14) || '00:00' as timestamp(0))  StartTmHr
         , clockTick  /* Every 10 seconds */
         , SUM(QryCount)  PointConcurrency
         ,(row_number() OVER(PARTITION BY StartTmHr ORDER BY PointConcurrency)- 1) * 100
                       / COUNT(*) OVER(PARTITION BY StartTmHr) AS Ntile   /* Ntile for the 600 10 second samples within the hour */
          FROM
              (  /* the expand  by anchor second clause duplicates the dbql columns for each second between the firststeptime and firstresptime.
                  grouping on the second tells us how many concurrent queries were running during that second */
              SELECT   BEGIN(Qper)  ClockTick
              ,cast(SUBSTR(CAST(ClockTick AS  VARCHAR(30)), 1, 17) || '0'  as timestamp(0)) as StartTm10s
              , CAST(1 AS SMALLINT) QryCount
              , PERIOD(firststeptime, firstresptime+ interval '0.001' second) QryDurationPeriod
              FROM {{ dbc.log }} as dbql
              WHERE {{ dbc.logdt }}   BETWEEN  {{ startdate | default('DATE-91')}}  AND {{ enddate | default('DATE-1')}}
                AND NumOfActiveAmps >  0
                AND firststeptime <= firstresptime
               EXPAND ON QryDurationPeriod AS Qper BY ANCHOR ANCHOR_SECOND
              ) qrylog
          WHERE extract(second  from ClockTick) in (0,10,20,30,40,50)  /* GIVES 600 POINTS PER 1 HOUR INTERVAL SO NTILE DOESN'T HAVE BIG EDGE EFFECT  */
          GROUP BY 1, 2
        ) ex
      WHERE logdate   BETWEEN  {{ startdate | default('DATE-92')}}  AND {{ enddate | default('DATE-1')}}
      GROUP BY 2,3
      ) with data
      primary index (LogTS)
      on commit preserve rows
      ;


- name: Collect Stats on vt_dim_indextype
  connect: source
  execute:
    sql: collect stats on vt_concurrency column(LogTS)

{% endif %}
{{ run.completed.append('vt_concurrency') or '' }}
