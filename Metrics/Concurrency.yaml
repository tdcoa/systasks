description: Print out table vt_concurrency, for reconciliation purposes.
version: 0
tasks:
### ============= STANDARD PRE-PROCESSING =============
# SETUP run context, and skip duplicate CREATE vt_* statements :
{% set run = namespace(completed=[], dates=[]) if run is not defined else run %}
### import macro to harden start/end dates:
{% import "coa_util.j2" as macro with context %}
{{ macro.harden_dates(run, startdate, enddate) }}
{% set startdate = run.dates[0] %}
{% set enddate = run.dates[1] %}
### ============= STANDARD PRE-PROCESSING =============

{% include "vt_concurrency.j2" %}

- name: Export vt_concurrency for charting
  connect: source
  export:
    file: concurrency_charting.csv
    sql: |
      select LogDate
      ,Avg(Concurrency_Avg) as "Average--#10890A"
      ,Avg(Concurrency_80Pctl) as "80th Percentile--#9C9700"
      ,Avg(Concurrency_95Pctl) as "95th Percentile--#7E0606"
      ,MAX(Concurrency_Peak) as "Absolute Peak--#FF0000"
      from vt_concurrency
      group by 1
      order by 1

- name: Chart Concurrency
  chart:
    command: chart/line_xDate_yElse.py
    params:
      - "file:concurrency_charting.csv"
      - "title:Concurrency - {{ siteid }}"
      - "width:12"
      - "height:6"

- name: Export vt_concurrency entirety
  connect: source
  export:
    file: concurrency.csv
    sql:  Select * from vt_concurrency
