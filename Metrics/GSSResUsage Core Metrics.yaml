description: Generates volatile table with core GSS ResUsage metrics, mostly around System CPU and IO.

# set defaults:
{% set   wlm_cod_cpu = 1.00    if   wlm_cod_cpu is not defined else  wlm_cod_cpu  %}
{% set    pm_cod_cpu = 1.00    if    pm_cod_cpu is not defined else   pm_cod_cpu  %}
{% set  epod_cod_cpu = 1.00    if  epod_cod_cpu is not defined else epod_cod_cpu  %}
{% set  save_prework = true    if  save_prework is not defined else  save_prework %}
{% set tca = false if tca is not defined else tca %}
{% set totalactive_cod_cpu = wlm_cod_cpu * pm_cod_cpu * epod_cod_cpu | round(6) %}
{% set fileprefix = 'gssresusage' %}


tasks:

### ============= STANDARD PRE-PROCESSING =============
# SETUP run context, and skip duplicate CREATE vt_* statements :
{% set run = namespace(completed=[], variables={}) if run is not defined else run %}
### Macro imported below will validate /correct a subset of variables,
### then export ALL variables to a reconcile_variables.csv
### Hence, this process must run AFTER the "tasks:" node
{% import "coa_util.j2" as macro with context %}
{{ macro.validate_variables(run) }}
### return corrected variables to the main namespace:
{% set startdate     = run.variables['startdate']     %}
{% set enddate       = run.variables['enddate']       %}
{% set your_name     = run.variables['your_name']     %}
{% set your_title    = run.variables['your_title']    %}
{% set customer_name = run.variables['customer_name'] %}
{% set tdver = run.variables['tdver'] %}{% set td15 = run.variables['td15'] %}
{% set td16 = run.variables['td16'] %}{% set td17 = run.variables['td17'] %}
### ============= STANDARD PRE-PROCESSING =============


{% include "vt_gssresusage_core.j2" %}

{% if save_prework and not tca %}
- name: export raw (original format) GSSResUsage.csv
  connect: source
  export:
    sql: Select * from vt_gssresusage_prework order by 5
    file: {{ fileprefix }}--{{ siteid }}_raw.csv
{% endif %}

- name: export final (tdver agnostic) GSSResUsage_Core.csv
  connect: source
  export:
    sql: Select * from vt_gssresusage_core order by logts
    file: {{ fileprefix }}--{{ siteid }}_full.csv

- name: export system details from GSSResUsage
  connect: source
  export:
    file: {{ fileprefix }}--system_detail.csv
    sql: |
      select Site_ID, NodeGen, DBSRelease, PMCOD, WMCOD, IOCOD, Amps as AMPs_perNode, CPUs as CPUs_perNode, avg(MaxMemSizeGB) as MemGB_perNode
      ,NumNodes as NodeCount
      ,Amps_perNode  * NodeCount as AMPs_Total
      ,CPUs_perNode  * NodeCount as CPUs_Total
      ,MemGB_perNode * NodeCount as MemGB_Total
      from vt_gssresusage_core
      group by Site_ID, NodeGen, DBSRelease, PMCOD, WMCOD, IOCOD, Amps, CPUs, NumNodes
